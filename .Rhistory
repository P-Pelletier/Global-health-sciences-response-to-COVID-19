panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.key=element_blank(),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size = 6)) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
figa
sink()
# clear memory #
rm(list = ls()) ; gc();gc();gc();gc();gc(); ls(); search()
# load libraries #
library(igraph)
library(RColorBrewer)
library(lattice)
library(tikzDevice)
library(ggplot2)
library(cowplot)
library(magick)
library(scales)
library(zoo)
library(countrycode)
library(reshape2)
library(reldist)
setwd("G:/Github/Global-health-sciences-response-to-COVID-19")
dataa = read.csv(file="Data/Data_2022/fig1a.csv",
header=TRUE,sep=",",stringsAsFactors = FALSE)
datab = read.csv(file="Data/Data_2022/fig1b.csv",
header=TRUE,sep=",",stringsAsFactors = FALSE)
datac = read.csv(file="Data/Data_2022/fig1c.csv",
header=TRUE,sep=",",stringsAsFactors = FALSE)
datapareto_share = read.csv(file="Data/Data_2022/pareto_share.csv",
header=TRUE,sep=",",stringsAsFactors = FALSE)
datapareto = read.csv(file="Data/Data_2022/pareto.csv",
header=TRUE,sep=",",stringsAsFactors = FALSE)
# plot 1 ####
months = unique(dataa$month)
# xlabel
dataa$month = as.character(c(201901:201912,202001:202012,202101:202112,202201:202212))
datac$month = as.character(c(201901:201912,202001:202012,202101:202112,202201:202212))
month = as.character(c(201901:201912,202001:202012,202101:202112,202201:202212))
sxd <- scale_x_discrete(breaks=c(month[1],month[7],month[13],month[19],month[25],month[31],month[37],month[43]),
labels = c("Jan 2019","July 2019", "Jan 2020","July 2020","Jan 2021", "July 2021","Jan 2022","July 2022"))
# margin size
oma2 <- c(0.3,0,0,0)
dataa$months_number = c(1:length(months))
datac$months_number = c(1:length(months))
#figa
figa = ggplot(dataa, aes(x = month)) +
geom_line(size=1.25,aes(y = Coronavirus, colour = "Coronavirus",group = 1)) +
geom_line(size=1.25,aes(y = non_Coronavirus, colour = "non_Coronavirus",group = 1))+
# covid19 treshold
geom_vline(xintercept = 12,linetype="dashed") +
scale_color_manual(values=c('#ff7f0e','#1f77b4'))+
labs(title=element_blank(), y="Number of papers", x=element_blank()) +
sxd +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
panel.border = element_rect(colour = "black", fill=NA, size=0.75),
plot.margin = unit(oma2, "cm"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.key=element_blank(),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size = 6)) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
figa
colnames(datab) <- c("pre Covid-19","Covid-19","country")
datab$country = countrycode(datab$country, origin ='country.name', destination ='iso3c')
datab <- melt(datab, id = "country")
datab
figb = ggplot(datab) +
geom_bar(aes(x = country, y = value, fill = variable), position = "dodge", stat = "identity")+
scale_fill_manual(values=c("#8B008B", "#696969")) +
labs(title=element_blank(), y="Coronavirus papers", x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title.x = element_text(size = 6),
axis.title.y = element_text(size = 6),
panel.border = element_rect(colour = "black", fill=NA, size=0.75),
plot.margin = unit(oma2, "cm"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.key=element_blank(),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size = 6)) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
figb
#**************************************************************
# Deals with `national scientific output'
# Creates
# 1. Descriptive statistics table
# 2. Regresssion table
#
# MM, last update 28.04.2022
#**************************************************************
###### prelude ############
# clear up
rm(list = ls())
Sys.setenv(LANG = "en") # For english language
Sys.setlocale("LC_TIME", "English")
detach_loaded_libraries <- function(){
# detach loaded libraries
# except for base pckgs
basePckgs <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods","package:base")
pckgs <- search()
pckgs <- pckgs[grepl("package:",pckgs) & !pckgs %in% basePckgs]
for(pckg in pckgs){
try(detach(pckg,character.only = TRUE))
}
}
detach_loaded_libraries()
# load libraries
library(xtable)
library(Hmisc)
library(stargazer)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
library(mctest)
library(lubridate)
library(sandwich) # for heteroskedasticity-robust standard errors
# data input
inputPath = "G:/Github/Global-health-sciences-response-to-COVID-19/data/"
# output path
outputPath = "G:/Github/Global-health-sciences-response-to-COVID-19/Results/table"
# log file
# load functions
source("G:/Github/Global-health-sciences-response-to-COVID-19/Utils/aux_fcts.R")
get_mctest_summaries <- function(res){
coefficients <- names(res[[4]]$coefficients)[-1]
mctests <- matrix(NA,nrow=length(res),ncol=length(coefficients)+1)
colnames(mctests) <- c(coefficients,"condition_number")
for(i in 1:length(res)){
# overall diagnostic
tmp <- omcdiag(res[[i]])
condition_number <- tmp$odiags[6,"results"]
# coefficient level diagnostic
tmp <- imcdiag(res[[i]])
leamers <- tmp$idiags[,"Leamer"]
# collect result
mctests[i,names(leamers)] <- leamers
mctests[i,"condition_number"] <- condition_number
}
avgmctests <- mctests %>% as_tibble() %>%
summarize(across(everything(),
~ mean(.x,na.rm=TRUE)))
sdmctests <- mctests %>% as_tibble() %>%
summarize(across(everything(),
~ sd(.x,na.rm=TRUE)))
mctests <- rbind(avgmctests,sdmctests) %>% as.matrix() %>% t()
return(mctests)
}
# settings
last_month <- 202112
months <- c(202001:202012,202101:202112,202201:202212)
##### variables used in national regression
vars <- c("coronaPubsCum","nonCoronaPubsPreCovid","coronaPubsPreCovid",
"cum_deaths","border","locked",
"gdp_pc","dep_internationalPreCovid_normalized","hdi")
####### prepare sample ########
panel <- get_country_panel(inputPath=inputPath)
unique(panel$country)
156*36
#**************************************************************
# Deals with `national scientific output'
# Creates
# 1. Descriptive statistics table
# 2. Regresssion table
#
# MM, last update 28.04.2022
#**************************************************************
###### prelude ############
# clear up
rm(list = ls())
Sys.setenv(LANG = "en") # For english language
Sys.setlocale("LC_TIME", "English")
detach_loaded_libraries <- function(){
# detach loaded libraries
# except for base pckgs
basePckgs <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods","package:base")
pckgs <- search()
pckgs <- pckgs[grepl("package:",pckgs) & !pckgs %in% basePckgs]
for(pckg in pckgs){
try(detach(pckg,character.only = TRUE))
}
}
detach_loaded_libraries()
# load libraries
library(xtable)
library(Hmisc)
library(stargazer)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
library(mctest)
library(lubridate)
library(sandwich) # for heteroskedasticity-robust standard errors
# data input
inputPath = "G:/Github/Global-health-sciences-response-to-COVID-19/data/"
# output path
outputPath = "G:/Github/Global-health-sciences-response-to-COVID-19/Results/table"
# log file
# load functions
source("G:/Github/Global-health-sciences-response-to-COVID-19/Utils/aux_fcts.R")
get_mctest_summaries <- function(res){
coefficients <- names(res[[4]]$coefficients)[-1]
mctests <- matrix(NA,nrow=length(res),ncol=length(coefficients)+1)
colnames(mctests) <- c(coefficients,"condition_number")
for(i in 1:length(res)){
# overall diagnostic
tmp <- omcdiag(res[[i]])
condition_number <- tmp$odiags[6,"results"]
# coefficient level diagnostic
tmp <- imcdiag(res[[i]])
leamers <- tmp$idiags[,"Leamer"]
# collect result
mctests[i,names(leamers)] <- leamers
mctests[i,"condition_number"] <- condition_number
}
avgmctests <- mctests %>% as_tibble() %>%
summarize(across(everything(),
~ mean(.x,na.rm=TRUE)))
sdmctests <- mctests %>% as_tibble() %>%
summarize(across(everything(),
~ sd(.x,na.rm=TRUE)))
mctests <- rbind(avgmctests,sdmctests) %>% as.matrix() %>% t()
return(mctests)
}
# settings
last_month <- 202112
months <- c(202001:202012,202101:202112,202201:202212)
##### variables used in national regression
vars <- c("coronaPubsCum","nonCoronaPubsPreCovid","coronaPubsPreCovid",
"cum_deaths","border","locked",
"gdp_pc","dep_internationalPreCovid_normalized","hdi")
####### prepare sample ########
panel <- get_country_panel(inputPath=inputPath)
precovid <- panel %>%
filter(month < 202001) %>%
mutate(coronaPubsPreCovid = collabPubsCorona + solePubsCorona,
nonCoronaPubsPreCovid = collabPubsNonCorona + solePubsNonCorona,
dep_international = dependance_international +
dependance_international_agency +
dependance_international_and_agency,
dep_international_corona = dependance_international_corona +
dependance_international_agency_corona +
dependance_international_and_agency_corona) %>%
group_by(countryCode) %>%
summarise(coronaPubsPreCovid = sum(coronaPubsPreCovid),
nonCoronaPubsPreCovid = sum(nonCoronaPubsPreCovid),
dep_internationalPreCovid = sum(dep_international_corona+ dep_international),
dep_internationalPreCovid_normalized = sum(dep_international_corona+ dep_international)/sum(N_paper_with_grantCorona+N_paper_with_grant))
#dep_international_coronaPreCovid = sum(dep_international_corona)/sum(N_paper_with_grantCorona))
covidPanel <- panel %>%
filter(month >= 202001) %>%
group_by(countryCode) %>%
mutate(coronaPubsCum = cumsum(coronaPubs),
border = lag(cumsum(border_closure_days)),
locked = lag(cumsum(lockdown_days)),
cum_deaths = lag(cum_deaths/pop)) %>%
left_join(precovid,by="countryCode") %>%
mutate_at(vars[1:(length(vars)-2)], .funs = ~ log(.x+1))
# Remove countries
#covidPanel <- subset(covidPanel, !(countryCode %in% c("CHN", "USA")))
covidPanel %<>%
group_by(month) %>%
mutate(
coronaPubs_fw = coronaPubs %>% percent_rank(),
coronaPubsCum_fw = coronaPubsCum %>% percent_rank(),
nonCoronaPubsPreCovid_fw = nonCoronaPubsPreCovid %>% percent_rank(),
coronaPubsPreCovid_fw = coronaPubsPreCovid %>% percent_rank(),
cum_deaths_fw = cum_deaths %>% percent_rank(),
dep_internationalPreCovid_fw =  dep_internationalPreCovid %>% percent_rank(),
dep_internationalPreCovid_normalized_fw =  dep_internationalPreCovid_normalized %>% percent_rank(),
locked_fw =  locked %>% percent_rank(),
border_fw =  border %>% percent_rank(),
pop_fw = pop %>% percent_rank(),
gdp_pc_fw = gdp_pc %>% percent_rank()
) %>%
ungroup()
unistats <- covidPanel %>%
ungroup() %>%
#select(all_of(vars)) %>%
summarise(across(.cols=all_of(vars),
.fns=list(min = ~ min(.x,na.rm=TRUE),
q1 = ~ quantile(.x, 0.25, na.rm = TRUE),
median = ~ median(.x, na.rm = TRUE),
q3 = ~ quantile(.x, 0.75, na.rm = TRUE),
max = ~ max(.x,na.rm=TRUE),
mean = ~ mean(.x,na.rm=TRUE),
sd = ~ sd(.x,na.rm=TRUE),
obs = ~ n(),
NAs = ~ sum(is.na(.x))),
.names="{.col}X{.fn}")
) %>%
gather(stat, val) %>%
separate(stat, into = c("var", "stat"), sep = "X") %>%
spread(stat, val) %>%
select(var, mean, sd, min, q1, median, q3, max, obs, NAs) %>%
as.data.frame()
rownamesUnistats <- unistats[,"var"]
unistats <- as.matrix(unistats[,-1])
rownames(unistats) <- rownamesUnistats
print(unistats)
stats_df <- data.frame(unistats)
rownames(stats_df) <- c("$border_{i,t'}$", "$c_{i,t'}$", "$c_{i,t0}$",
"$deaths_{i,t'}$","$Int Dep_{i,t0}$",
"$gdp_{i,t0}$", "$hdi_{i,t0}$","$locked_{i,t'}$","$n_{i,t0}$")
# Use stargazer to create the table
stargazer(stats_df,
header = TRUE,        # Hide column names of the matrix in the output
rownames = TRUE,      # Hide row names of the data frame in the output
align = TRUE,
summary = FALSE, # Align columns of the table
type = "text" ,
out = paste0(outputPath,"/national_output_stats.tex")
)
cors <- covidPanel %>% ungroup() %>% select(all_of(vars)) %>%
as.matrix() %>% rcorr()
descr <- round(cbind(unistats[rownames(cors$r),c("mean","sd")],cors$r),
digits=3)
cat("univariate stats and correlation after logging.\n")
xtable(descr)
print(descr)
# main regression by month
models <- list()
cov <- list()
for(i in 1:length(months[0:36])){
print("*************")
print(months[i])
idx <- covidPanel$month==months[i]
if(months[i]>=202004){
models[[i]] <- lm(coronaPubsCum ~ nonCoronaPubsPreCovid + coronaPubsPreCovid +
dep_internationalPreCovid_normalized  +
cum_deaths  + border + locked +
gdp_pc + hdi
,data=covidPanel[idx,])
cov[[i]] = sqrt(diag(sandwich::vcovCL(models[[i]], cluster = covidPanel[idx,]$region)))
}else{ # no/too few closures/lockdown
models[[i]] <- lm(coronaPubsCum ~ nonCoronaPubsPreCovid + coronaPubsPreCovid +
dep_internationalPreCovid_normalized  +
gdp_pc + hdi
,data=covidPanel[idx,])
cov[[i]] = sqrt(diag(sandwich::vcovCL(models[[i]], cluster = covidPanel[idx,]$region)))
}
#  print(summary(models[[i]]))
}
# Define the new variable names
var_labels <- c("log(1 + nonCoronaPubsPreCovid)" = "$n_{t0}$","log(1 + coronaPubsPreCovid))"="$c_{t0}$",
"log(1 + dep_internationalPreCovid)" = "$Int Dep_{t0}$",
"log(1 + cum_deaths)" = "$deaths_{t'}$", "log(1 + border_closure_days_past12m)"="$border_{t'}$",
"log(1 + lockdown_days_past12m)"="$locked_{t'}$","log(1 + gdp_pc)"="$gdp_{t0}$"#"log(1 + pop)" = "$pop_{t0}$",
#"hdi"="$hdi_{t0}$"
)
# Omit the desired statistics
omit_stats <- c("max.rsq", "ll", "wald", "lr","logrank","res.dev","f","ser","n")
months_clean <- parse_date_time(as.character(months), orders = "ym")   # Convert to date
months_clean <- format(months_clean, format = "%b %Y")
stargazer::stargazer(
models[0:12],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[0:12],
title = "", covariate.labels = var_labels, omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_early.tex")
)
stargazer::stargazer(
models[13:24],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[13:24],
title = "", covariate.labels = var_labels, omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_mid.tex")
)
stargazer::stargazer(
models[25:36],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[25:36],
title = "", covariate.labels = var_labels, omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_end.tex")
)
stargazer::stargazer(
models[0:12],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[0:12],
title = "", omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_early.tex")
)
stargazer::stargazer(
models[13:24],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[13:24],
title = "", omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_mid.tex")
)
stargazer::stargazer(
models[25:36],
se = cov,
align = TRUE, type = "text",  omit = c('Constant'), font.size = "small",
dep.var.labels.include = FALSE, dep.var.caption = "",column.labels = months_clean[25:36],
title = "", omit.stat = omit_stats,
out = paste0(outputPath,"/national_output_end.tex")
)
156*32"""
156*32
156*36
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.
gc() #free up memrory and report the memory usage.
graphics.off()
Sys.setenv(LANG = "en") # For english language
Sys.setlocale("LC_TIME", "English")
options(scipen = 5) # To deactivate annoying scientific number notation
library(zoo)
library(magrittr) # For extra-piping operators (eg. %<>%)
library(tidyverse) # Collection of all the good stuff like dplyr, ggplot2 ect.
library(cowplot)
library(ggpubr)
library(magick)
library(lubridate)
df <- read_csv("../Data/fig_funding_new2.csv")
df$date <- parse_date_time(as.character(df$month), orders = "ym")   # Convert to date
df$date <- format(df$date, format = "%b %Y")
df[is.na(df)] <- 0
df$month <- as.numeric(df$month)
df %<>% mutate(share_common_grant_roll = rollmean(share_common_grant, k = 1, fill = NA, align = "right"))
df<- subset(df, month >= 201901)
months = unique(df$date)
df$months_number = c(1:length(months))
df$month <- as.character(df$month)
month <- df$month
oma2 <- c(0.3,0,0,0.3)
custom_theme = theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.margin = unit(oma2, "cm"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.key=element_blank(),
legend.title=element_blank(),
legend.position="top",
legend.text=element_text(size = 12))
sxd <- scale_x_discrete(breaks=c(month[1],month[7],month[13],month[19],month[25],month[31],month[37],month[43]),##,month[29]),
labels = c("Jan 2019","July 2019", "Jan 2020","July 2020","Jan 2021", "July 2021","Jan 2022","July 2022"))##, "May 2021" ))
max_value = max(log(df$n_project))*1.5
figa = ggplot(df, aes(x = month)) +
geom_line(size=1,aes(y = log(n_project), color='n_project',group=1)) +
geom_line(size=1,aes(y = log(n_project_corona), color='n_project_corona',group=1)) +
geom_line(size=1,aes(y = share_common_grant_roll*max_value, color='share_common_grant',group=1)) +
scale_color_manual(name = "Type",
values = c( "n_project" = "black", "n_project_corona" = "#1f77b4","share_common_grant"="orange"),
labels = c( "Non-CRR","CRR","Share of common CRR and Non-CRR project")) +
labs(x = "Month",
y = "Log number of project",
color = "Legend") +
sxd +
scale_y_continuous(
name = "Log number of project",
sec.axis = sec_axis(~./max_value, name="Share common project")
) +
custom_theme
#  scale_y_continuous(
#    name = "Share transition",
#    sec.axis = sec_axis(~./3, name="Share Ind.")
#  )
figa
pdf(file="../Results/plots/Fig_funding_a.pdf", width=8, height=5, family="Helvetica", pointsize=6)
figa
dev.off()
figb = ggplot(df, aes(x = month)) +
geom_line(size=1,aes(y = new_corona_project_from_global, color='new_corona_project_from_global',group=1)) +
geom_line(size=1,aes(y = new_corona_project, color='new_corona_project',group=1)) +
#geom_line(size=1,aes(y = new_global_project, color='new_global_project',group=1)) +
#geom_line(size=1,aes(y = new_global_project_future_use_covid, color='new_global_project_future_feeding',group=1)) +
scale_color_manual(name = "Type",
values = c( "new_corona_project_from_global" = "black", "new_corona_project" = "#1f77b4"),
#"new_global_project_future_feeding" = "orange"),
labels = c( "New CRR project","New CRR project from Non-CRR")) +
labs(x = "Year",
y = "Number of project",
color = "Legend") +
sxd +
custom_theme
#  scale_y_continuous(
#    name = "Share transition",
#    sec.axis = sec_axis(~./3, name="Share Ind.")
#  )
figb
pdf(file="../Results/plots/Fig_funding_b.pdf", width=8, height=5, family="Helvetica", pointsize=6)
figb
dev.off()
View(df)
